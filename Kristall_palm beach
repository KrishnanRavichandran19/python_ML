{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Kristall_palm beach","provenance":[{"file_id":"1_9aw9hyNrleKRo6UOA4bXU3N8SPgwGqC","timestamp":1604912780596}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"yVto6kAj_3Ps"},"source":["import pandas as pd\n","pharma_data = pd.read_csv('https://raw.githubusercontent.com/KrishnanRavichandran/data/main/check.csv?token=APB4KEV6UXJUPC6S57CNXWC7VEECI')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3or64F8Ye8pB"},"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.preprocessing import LabelEncoder"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F46yRdrtfBdt","executionInfo":{"status":"ok","timestamp":1604913173599,"user_tz":-60,"elapsed":1257,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"653e7001-deec-4b02-bc9a-4e50a966a910","colab":{"base_uri":"https://localhost:8080/"}},"source":["pharma_data.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 84 entries, 0 to 83\n","Data columns (total 6 columns):\n"," #   Column               Non-Null Count  Dtype  \n","---  ------               --------------  -----  \n"," 0   Modules              84 non-null     object \n"," 1   Irradiation          84 non-null     float64\n"," 2   Temperaure           83 non-null     float64\n"," 3   Voltage              83 non-null     float64\n"," 4   Current              84 non-null     float64\n"," 5   Maximum Power point  84 non-null     float64\n","dtypes: float64(5), object(1)\n","memory usage: 4.1+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FP8qPmg4fHsN","executionInfo":{"status":"ok","timestamp":1604913198111,"user_tz":-60,"elapsed":1267,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"9534a639-4d5d-4a2d-c467-c48b0f88f64b","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","#get correlations of each features in dataset\n","corrmat = pharma_data.corr()\n","top_corr_features = corrmat.index\n","plt.figure(figsize=(20,20))\n","#plot heat map\n","g=sns.heatmap(pharma_data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x1440 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"jnIa07nZjd4z"},"source":["pharma_data['A'].fillna(1, inplace=True)\n","pharma_data['B'].fillna(0, inplace=True)\n","pharma_data['C'].fillna(0, inplace=True)\n","pharma_data['D'].fillna(0, inplace=True)\n","pharma_data['E'].fillna(0, inplace=True)\n","pharma_data['F'].fillna(0, inplace=True)\n","pharma_data['Z'].fillna(0, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d6kSn4Avjl8o"},"source":["pharma_data['Number_of_prev_cond'].fillna(3, inplace=True)\n","pharma_data['Treated_with_drugs'].fillna('DX6', inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GCyltjQDjuNY","executionInfo":{"status":"ok","timestamp":1594143665813,"user_tz":-330,"elapsed":1069,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"fe32417e-3536-4996-8db0-bb8bd8261c74","colab":{"base_uri":"https://localhost:8080/","height":435}},"source":["pharma_data.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 23097 entries, 0 to 23096\n","Data columns (total 18 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   ID_Patient_Care_Situation  23097 non-null  int64  \n"," 1   Diagnosed_Condition        23097 non-null  int64  \n"," 2   Patient_ID                 23097 non-null  int64  \n"," 3   Treated_with_drugs         23097 non-null  object \n"," 4   Patient_Age                23097 non-null  int64  \n"," 5   Patient_Body_Mass_Index    23097 non-null  float64\n"," 6   Patient_Smoker             23097 non-null  object \n"," 7   Patient_Rural_Urban        23097 non-null  object \n"," 8   Patient_mental_condition   23097 non-null  object \n"," 9   A                          23097 non-null  float64\n"," 10  B                          23097 non-null  float64\n"," 11  C                          23097 non-null  float64\n"," 12  D                          23097 non-null  float64\n"," 13  E                          23097 non-null  float64\n"," 14  F                          23097 non-null  float64\n"," 15  Z                          23097 non-null  float64\n"," 16  Number_of_prev_cond        23097 non-null  float64\n"," 17  Survived_1_year            23097 non-null  int64  \n","dtypes: float64(9), int64(5), object(4)\n","memory usage: 3.2+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VRimbYbakCQR"},"source":["X = pharma_data.drop('Patient_ID', axis=1)\n","X = X.drop('Survived_1_year', axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ofe3G0CckH1X"},"source":["y = pharma_data[['Survived_1_year']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lqeXYi2SkVxO","executionInfo":{"status":"ok","timestamp":1594143675147,"user_tz":-330,"elapsed":1783,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"a8f7eb17-641f-46b6-cced-c0950af74649","colab":{"base_uri":"https://localhost:8080/","height":233}},"source":["X = pd.get_dummies(X, columns=['Treated_with_drugs'])\n","X = pd.get_dummies(X, columns=['Patient_Smoker'])\n","X = pd.get_dummies(X, columns=['Patient_Rural_Urban'])\n","X = pd.get_dummies(X, columns=['Patient_mental_condition'])\n","X = X.drop('Patient_Smoker_Cannot say', axis = 1)\n","X.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID_Patient_Care_Situation</th>\n","      <th>Diagnosed_Condition</th>\n","      <th>Patient_Age</th>\n","      <th>Patient_Body_Mass_Index</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","      <th>E</th>\n","      <th>F</th>\n","      <th>Z</th>\n","      <th>Number_of_prev_cond</th>\n","      <th>Treated_with_drugs_DX1</th>\n","      <th>Treated_with_drugs_DX1 DX2</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX3</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX3 DX4</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX3 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX3 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX4</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX2 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX3</th>\n","      <th>Treated_with_drugs_DX1 DX3 DX4</th>\n","      <th>Treated_with_drugs_DX1 DX3 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX3 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX4</th>\n","      <th>Treated_with_drugs_DX1 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX1 DX5</th>\n","      <th>Treated_with_drugs_DX2</th>\n","      <th>Treated_with_drugs_DX2 DX3</th>\n","      <th>Treated_with_drugs_DX2 DX3 DX4</th>\n","      <th>Treated_with_drugs_DX2 DX3 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX2 DX3 DX5</th>\n","      <th>Treated_with_drugs_DX2 DX4</th>\n","      <th>Treated_with_drugs_DX2 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX2 DX5</th>\n","      <th>Treated_with_drugs_DX3</th>\n","      <th>Treated_with_drugs_DX3 DX4</th>\n","      <th>Treated_with_drugs_DX3 DX4 DX5</th>\n","      <th>Treated_with_drugs_DX3 DX5</th>\n","      <th>Treated_with_drugs_DX4</th>\n","      <th>Treated_with_drugs_DX4 DX5</th>\n","      <th>Treated_with_drugs_DX5</th>\n","      <th>Treated_with_drugs_DX6</th>\n","      <th>Patient_Smoker_NO</th>\n","      <th>Patient_Smoker_YES</th>\n","      <th>Patient_Rural_Urban_RURAL</th>\n","      <th>Patient_Rural_Urban_URBAN</th>\n","      <th>Patient_mental_condition_Stable</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>22374</td>\n","      <td>8</td>\n","      <td>56</td>\n","      <td>18.479385</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18164</td>\n","      <td>5</td>\n","      <td>36</td>\n","      <td>22.945566</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6283</td>\n","      <td>23</td>\n","      <td>48</td>\n","      <td>27.510027</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5339</td>\n","      <td>51</td>\n","      <td>5</td>\n","      <td>19.130976</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33012</td>\n","      <td>0</td>\n","      <td>128</td>\n","      <td>1.348400</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   ID_Patient_Care_Situation  ...  Patient_mental_condition_Stable\n","0                      22374  ...                                1\n","1                      18164  ...                                1\n","2                       6283  ...                                1\n","3                       5339  ...                                1\n","4                      33012  ...                                1\n","\n","[5 rows x 49 columns]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"_uu9sK1AqCd2"},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vkFV7ikdkmj3"},"source":["## Hyper Parameter Optimization\n","\n","params={\n"," \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n"," \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n"," \"min_child_weight\" : [ 1, 3, 5, 7 ],\n"," \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n"," \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n","    \n","}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h7zVwOEhkpL3"},"source":["\n","## Hyperparameter optimization using RandomizedSearchCV\n","from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n","import xgboost"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwO3St3ikzZv"},"source":["def timer(start_time=None):\n","    if not start_time:\n","        start_time = datetime.now()\n","        return start_time\n","    elif start_time:\n","        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n","        tmin, tsec = divmod(temp_sec, 60)\n","        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0waoIrAElBBH"},"source":["classifier=xgboost.XGBClassifier()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PX0MMCJHlHEw"},"source":["random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='f1',n_jobs=-1,cv=5,verbose=3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y_34S0kDlKRG","executionInfo":{"status":"ok","timestamp":1594143769925,"user_tz":-330,"elapsed":75850,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"9413d766-c9ea-42a9-fd52-46ba11b49126","colab":{"base_uri":"https://localhost:8080/","height":572}},"source":["from datetime import datetime\n","# Here we go\n","#start_time = timer(None) # timing starts from this point for \"start_time\" variable\n","random_search.fit(X_train,y_train)\n","#timer(start_time) # timing ends here for \"start_time\" variable"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Fitting 5 folds for each of 5 candidates, totalling 25 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:  1.2min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=5, error_score=nan,\n","                   estimator=XGBClassifier(base_score=0.5, booster='gbtree',\n","                                           colsample_bylevel=1,\n","                                           colsample_bynode=1,\n","                                           colsample_bytree=1, gamma=0,\n","                                           learning_rate=0.1, max_delta_step=0,\n","                                           max_depth=3, min_child_weight=1,\n","                                           missing=None, n_estimators=100,\n","                                           n_jobs=1, nthread=None,\n","                                           objective='binary:logistic',\n","                                           random_state=0, reg_alpha=0,\n","                                           reg_lambda=1, sc...\n","                                           seed=None, silent=None, subsample=1,\n","                                           verbosity=1),\n","                   iid='deprecated', n_iter=5, n_jobs=-1,\n","                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,\n","                                                             0.7],\n","                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4],\n","                                        'learning_rate': [0.05, 0.1, 0.15, 0.2,\n","                                                          0.25, 0.3],\n","                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,\n","                                                      15],\n","                                        'min_child_weight': [1, 3, 5, 7]},\n","                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n","                   return_train_score=False, scoring='f1', verbose=3)"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"HQK_EOOYmJe3","executionInfo":{"status":"ok","timestamp":1594143777873,"user_tz":-330,"elapsed":1358,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"452e3f87-f8e7-4707-bd4e-417046165f75","colab":{"base_uri":"https://localhost:8080/","height":134}},"source":["\n","random_search.best_estimator_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=0.4, gamma=0.0,\n","              learning_rate=0.25, max_delta_step=0, max_depth=6,\n","              min_child_weight=7, missing=None, n_estimators=100, n_jobs=1,\n","              nthread=None, objective='binary:logistic', random_state=0,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","              silent=None, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"xHJzcpammMJP","executionInfo":{"status":"ok","timestamp":1594143784506,"user_tz":-330,"elapsed":1701,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"bee82a00-e242-4a8a-87c8-4a9f88576600","colab":{"base_uri":"https://localhost:8080/","height":100}},"source":["\n","random_search.best_params_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'colsample_bytree': 0.4,\n"," 'gamma': 0.0,\n"," 'learning_rate': 0.25,\n"," 'max_depth': 6,\n"," 'min_child_weight': 7}"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"0AG6MUEwmNaY"},"source":["\n","classifier=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=0.4, gamma=0.0,\n","              learning_rate=0.25, max_delta_step=0, max_depth=6,\n","              min_child_weight=7, missing=None, n_estimators=100, n_jobs=1,\n","              nthread=None, objective='binary:logistic', random_state=0,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","              silent=None, subsample=1, verbosity=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LE5LfFwmmUrf","executionInfo":{"status":"ok","timestamp":1594143816439,"user_tz":-330,"elapsed":23470,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"aa5a4315-01d8-4be3-c97f-afcf84196b03","colab":{"base_uri":"https://localhost:8080/","height":104}},"source":["\n","from sklearn.model_selection import cross_val_score\n","score=cross_val_score(classifier,X_train,y_train,cv=10)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"BcZ-pQg5mdlu","executionInfo":{"status":"ok","timestamp":1594143825948,"user_tz":-330,"elapsed":1710,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"0e93efe7-94d4-4a0c-bed0-29573730156d","colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["score"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.84469697, 0.85497835, 0.83062771, 0.83603896, 0.83225108,\n","       0.8241342 , 0.83766234, 0.81970763, 0.83595019, 0.83486735])"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"rcy_ztkZmeK_","executionInfo":{"status":"ok","timestamp":1594143828636,"user_tz":-330,"elapsed":1430,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"d509e764-f15b-4908-fb25-c818d4b4aa65","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["score.mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8350914786350628"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"4T_7VX7JtPMC"},"source":["from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p5UIDu7utQkM"},"source":["y_predict = random_search.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cyyWMFAut7Nl","executionInfo":{"status":"ok","timestamp":1594143836528,"user_tz":-330,"elapsed":918,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"c0920460-7c56-47f7-ff40-3c8c8583ac34","colab":{"base_uri":"https://localhost:8080/","height":234}},"source":["print('Test Acc', accuracy_score(y_test,y_predict))\n","print('Test f1', f1_score(y_test,y_predict))\n","print(classification_report(y_test,y_predict))\n","print(confusion_matrix(y_test,y_predict))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test Acc 0.8374458874458874\n","Test f1 0.8728196443691786\n","              precision    recall  f1-score   support\n","\n","           0       0.81      0.74      0.77      1741\n","           1       0.85      0.90      0.87      2879\n","\n","    accuracy                           0.84      4620\n","   macro avg       0.83      0.82      0.82      4620\n","weighted avg       0.84      0.84      0.84      4620\n","\n","[[1292  449]\n"," [ 302 2577]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IZLxF16pq5hd"},"source":["test_new = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/pharma_data/Testing_set_begs.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QH_adN-FrCDt","executionInfo":{"status":"ok","timestamp":1594143843793,"user_tz":-330,"elapsed":904,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"343b4ec5-3091-4572-961d-09d270342138","colab":{"base_uri":"https://localhost:8080/","height":953}},"source":["test_new = pd.get_dummies(test_new, columns=['Treated_with_drugs'])\n","test_new = pd.get_dummies(test_new, columns=['Patient_Smoker'])\n","test_new = pd.get_dummies(test_new, columns=['Patient_Rural_Urban'])\n","test_new = pd.get_dummies(test_new, columns=['Patient_mental_condition'])\n","test_new = test_new.drop('Patient_ID', axis=1)\n","test_new.head()\n","test_new.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 9303 entries, 0 to 9302\n","Data columns (total 49 columns):\n"," #   Column                                   Non-Null Count  Dtype  \n","---  ------                                   --------------  -----  \n"," 0   ID_Patient_Care_Situation                9303 non-null   int64  \n"," 1   Diagnosed_Condition                      9303 non-null   int64  \n"," 2   Patient_Age                              9303 non-null   int64  \n"," 3   Patient_Body_Mass_Index                  9303 non-null   float64\n"," 4   A                                        9303 non-null   float64\n"," 5   B                                        9303 non-null   float64\n"," 6   C                                        9303 non-null   float64\n"," 7   D                                        9303 non-null   float64\n"," 8   E                                        9303 non-null   float64\n"," 9   F                                        9303 non-null   float64\n"," 10  Z                                        9303 non-null   float64\n"," 11  Number_of_prev_cond                      9303 non-null   float64\n"," 12  Treated_with_drugs_DX1                   9303 non-null   uint8  \n"," 13  Treated_with_drugs_DX1 DX2               9303 non-null   uint8  \n"," 14  Treated_with_drugs_DX1 DX2 DX3           9303 non-null   uint8  \n"," 15  Treated_with_drugs_DX1 DX2 DX3 DX4       9303 non-null   uint8  \n"," 16  Treated_with_drugs_DX1 DX2 DX3 DX4 DX5   9303 non-null   uint8  \n"," 17  Treated_with_drugs_DX1 DX2 DX3 DX5       9303 non-null   uint8  \n"," 18  Treated_with_drugs_DX1 DX2 DX4           9303 non-null   uint8  \n"," 19  Treated_with_drugs_DX1 DX2 DX4 DX5       9303 non-null   uint8  \n"," 20  Treated_with_drugs_DX1 DX2 DX5           9303 non-null   uint8  \n"," 21  Treated_with_drugs_DX1 DX3               9303 non-null   uint8  \n"," 22  Treated_with_drugs_DX1 DX3 DX4           9303 non-null   uint8  \n"," 23  Treated_with_drugs_DX1 DX3 DX4 DX5       9303 non-null   uint8  \n"," 24  Treated_with_drugs_DX1 DX3 DX5           9303 non-null   uint8  \n"," 25  Treated_with_drugs_DX1 DX4               9303 non-null   uint8  \n"," 26  Treated_with_drugs_DX1 DX4 DX5           9303 non-null   uint8  \n"," 27  Treated_with_drugs_DX1 DX5               9303 non-null   uint8  \n"," 28  Treated_with_drugs_DX2                   9303 non-null   uint8  \n"," 29  Treated_with_drugs_DX2 DX3               9303 non-null   uint8  \n"," 30  Treated_with_drugs_DX2 DX3 DX4           9303 non-null   uint8  \n"," 31  Treated_with_drugs_DX2 DX3 DX4 DX5       9303 non-null   uint8  \n"," 32  Treated_with_drugs_DX2 DX3 DX5           9303 non-null   uint8  \n"," 33  Treated_with_drugs_DX2 DX4               9303 non-null   uint8  \n"," 34  Treated_with_drugs_DX2 DX4 DX5           9303 non-null   uint8  \n"," 35  Treated_with_drugs_DX2 DX5               9303 non-null   uint8  \n"," 36  Treated_with_drugs_DX3                   9303 non-null   uint8  \n"," 37  Treated_with_drugs_DX3 DX4               9303 non-null   uint8  \n"," 38  Treated_with_drugs_DX3 DX4 DX5           9303 non-null   uint8  \n"," 39  Treated_with_drugs_DX3 DX5               9303 non-null   uint8  \n"," 40  Treated_with_drugs_DX4                   9303 non-null   uint8  \n"," 41  Treated_with_drugs_DX4 DX5               9303 non-null   uint8  \n"," 42  Treated_with_drugs_DX5                   9303 non-null   uint8  \n"," 43  Treated_with_drugs_DX6                   9303 non-null   uint8  \n"," 44  Patient_Smoker_NO                        9303 non-null   uint8  \n"," 45  Patient_Smoker_YES                       9303 non-null   uint8  \n"," 46  Patient_Rural_Urban_RURAL                9303 non-null   uint8  \n"," 47  Patient_Rural_Urban_URBAN                9303 non-null   uint8  \n"," 48  Patient_mental_condition_Stable          9303 non-null   uint8  \n","dtypes: float64(9), int64(3), uint8(37)\n","memory usage: 1.2 MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ViLMowqyrFgL"},"source":["Survived_1_year = random_search.predict(test_new)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yTIOdfLhwgn_","executionInfo":{"status":"ok","timestamp":1594143852604,"user_tz":-330,"elapsed":1330,"user":{"displayName":"Krishnan Ravichandran","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi-2amnVIjmOgdAhrugjr6Xtr5v6RUYjYKcywBMAA=s64","userId":"03894191070346959493"}},"outputId":"b2115026-8ee5-4ef9-86fd-32980aae31b7","colab":{"base_uri":"https://localhost:8080/","height":17}},"source":["res = pd.DataFrame(Survived_1_year)\n","res.index = test_new.index\n","res.columns = [\"Survived_1_year\"]\n","\n","from google.colab import files \n","res.to_csv('Assig_3_3.csv')\n","files.download('Assig_3_3.csv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_563b9a76-150f-45fb-a654-fb1fc34efc67\", \"Assig_3_3.csv\", 64028)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]}]}